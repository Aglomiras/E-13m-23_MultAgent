package org.mpei.ClassWork_18;

public class Lecture18 {
    /**
     * Как правильно писать код
     *
     * !!! Код должен быть читаемый и понятный для других программистов. Чтобы другой программист смог понять, что
     * ты делаешь в коде.
     * Что такое хороший код???
     * - Старайтесь не делать методы, которые выходят за пределы одной страницы среды разработки.
     * - Начинающим программистам не следует задумываться об оптимизации алгоритма, лучше сделать понятный код.
     * - Когда дело доходит до улучшения кода, тогда стоит задумываться о том, как можно оптимизировать код.
     * - Необходимо задумываться о названии переменных и классов, чтобы после перерыва в программировании, понимать что вы написали.
     * - Метод должен выполнять одну задачу (строго одну задачу). Если он выполняет несколько задач, то стоит их разделить на два метода.
     * - Хороший код покрыт 100% unit-test-ами.
     *
     * Что такое плохой код???
     * - Один метод содержит в себе много задач.
     * - Метод очень длинный.
     * - Для изменения метода, необходимо изменить и другие составляющие кода.
     * - Не используются интерфейсы.
     * - Отсутствие комментариев.
     * - Чрезмерное использование комментариев (нужно соблюдать золотую середину).
     * - Не стоит писать код, под будущую функциональность.
     * - Большие блоки try-catch (это затрудняет поиск исключений).
     * - Использование публичных статических изменяемых переменных.
     *
     * Перед тем как пушить в репозиторий, что необходимо делать???
     * - Тестирование кода.
     * - Стиль кода должен соответствовать стилю Лида.
     * - Проверка кода перед ревью.
     * - Обязательно описываем в коммите, что было изменено.
     *
     * Принцип SOLID:
     * - Принцип единоответственности - не перемешиваем методы в классах, объект должен делать одну вещь. Класс ответственен
     * только за какую-то одну функциональность и не за что более.
     * - Принцип открытости/закрытости - открыт для расширения, закрыт для изменения
     * -
     * - Принцип разделения интерфейсов - не пишите большой интерфейс, пишите много маленьких
     * -
     * */
}
